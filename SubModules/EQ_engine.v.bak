module EQ_engine(clk, rst_n, aud_in_lft, aud_in_rght, vld, POT_LP, POT_B1, POT_B2, POT_B3, POT_HP, POT_VOL, aud_out_lft, aud_out_rght, seq_low);
  
	input clk, rst_n;
	input [15:0] aud_in_lft, aud_in_rght;
	input vld;
  	input [11:0] POT_LP, POT_B1, POT_B2, POT_B3, POT_HP, POT_VOL;
  	output [15:0] aud_out_lft, aud_out_rght;
	output seq_low;
  
	logic [15:0] lft_out_high_q, rght_out_high_q;
	logic [15:0] lft_out_low_q, rght_out_low_q;
  
  	logic [15:0] lft_out_lp, rght_out_lp, lft_out_b1, rght_out_b1, lft_out_b2, rght_out_b2, lft_out_b3, rght_out_b3, lft_out_hp, rght_out_hp;
	
	logic sequencing_low;
	logic sequencing_high;
	
	logic wrt_smpl_low;
  
  	logic signed [15:0] scaled_LP_lft, scaled_B1_lft, scaled_B2_lft, scaled_B3_lft, scaled_HP_lft, scaled_LP_rght, scaled_B1_rght, scaled_B2_rght, scaled_B3_rght, scaled_HP_rght;
  	logic signed [15:0] audio_combined_lft, audio_combined_rght;
  	logic signed [28:0] audio_vol_lft, audio_vol_rght;
  

	
	always_ff@(posedge clk,negedge rst_n)begin
    if(!rst_n)
      	wrt_smpl_low<=0;
    else if(vld)
      	wrt_smpl_low<=~wrt_smpl_low;
	end
	
	//QUEUE INSTANTIATIONS
	high_freq_queue i_high_queue(.clk(clk),.rst_n(rst_n),.lft_smpl(aud_in_lft),.rght_smpl(aud_in_rght),.wrt_smpl(vld),
						.lft_out(lft_out_high_q),.rght_out(rght_out_high_q),.sequencing(sequencing_high));
	
	low_freq_queue i_low_queue(.clk(clk),.rst_n(rst_n),.lft_smpl(aud_in_lft),.rght_smpl(aud_in_rght),.wrt_smpl(wrt_smpl_low),
						.lft_out(lft_out_low_q),.rght_out(rght_out_low_q),.sequencing(sequencing_low));
	
  //FIR INSTANTIATIONS
  FIR_LP fir_lp_dut(.clk(clk), .rst_n(rst_n), .lft_in(lft_out_low_q), .rght_in(rght_out_low_q), .sequencing(sequencing_low), .lft_out(lft_out_lp), .rght_out(rght_out_lp));
	FIR_B1 fir_b1_dut(.clk(clk), .rst_n(rst_n), .lft_in(lft_out_low_q), .rght_in(rght_out_low_q), .sequencing(sequencing_low), .lft_out(lft_out_b1), .rght_out(rght_out_b1));
	FIR_B2 fir_b2_dut(.clk(clk), .rst_n(rst_n), .lft_in(lft_out_high_q), .rght_in(rght_out_high_q), .sequencing(sequencing_high), .lft_out(lft_out_b2), .rght_out(rght_out_b2));
	FIR_B3 fir_b3_dut(.clk(clk), .rst_n(rst_n), .lft_in(lft_out_high_q), .rght_in(rght_out_high_q), .sequencing(sequencing_high), .lft_out(lft_out_b3), .rght_out(rght_out_b3));
	FIR_HP fir_hp_dut(.clk(clk), .rst_n(rst_n), .lft_in(lft_out_high_q), .rght_in(rght_out_high_q), .sequencing(sequencing_high), .lft_out(lft_out_hp), .rght_out(rght_out_hp));
  
  //BANDSCALE INSTANTIATIONS
	band_scale band_lp_lft(.POT(POT_LP), .audio(lft_out_lp), .scaled(scaled_LP_lft));
	band_scale band_lp_rght(.POT(POT_LP), .audio(rght_out_lp), .scaled(scaled_LP_rght));
	band_scale band_b1_lft(.POT(POT_B1), .audio(lft_out_b1), .scaled(scaled_B1_lft));
	band_scale band_b1_rght(.POT(POT_B1), .audio(rght_out_b1), .scaled(scaled_B1_rght));
	band_scale band_b2_lft(.POT(POT_B2), .audio(lft_out_b2), .scaled(scaled_B2_lft));
	band_scale band_b2_rght(.POT(POT_B2), .audio(rght_out_b2), .scaled(scaled_B2_rght));
	band_scale band_b3_lft(.POT(POT_B3), .audio(lft_out_b3), .scaled(scaled_B3_lft));
	band_scale band_b3_rght(.POT(POT_B3), .audio(rght_out_b3), .scaled(scaled_B3_rght));
	band_scale band_hp_lft(.POT(POT_HP), .audio(lft_out_hp), .scaled(scaled_HP_lft));
	band_scale band_hp_rght(.POT(POT_HP), .audio(rght_out_hp), .scaled(scaled_HP_rght));
	
    
  // Combine signals from different bands
  assign audio_combined_lft = (scaled_LP_lft + scaled_B1_lft) + (scaled_B2_lft + scaled_B3_lft) + scaled_HP_lft;
  assign audio_combined_rght = (scaled_LP_rght + scaled_B1_rght) + (scaled_B2_rght + scaled_B3_rght) + scaled_HP_rght;
  
  // Audio scaled by volume
  assign audio_vol_lft = audio_combined_lft * {1'b0, POT_VOL};
  assign audio_vol_rght = audio_combined_rght * {1'b0, POT_VOL};
  
  
  //FINAL AUDIO OUTPUT
  assign aud_out_lft = audio_vol_lft[27:12];
  assign aud_out_rght = audio_vol_rght[27:12];

  assign seq_low = sequencing_low;

endmodule